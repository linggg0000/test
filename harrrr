/*!
 * jQuery twitter bootstrap wizard plugin (patched for Bootstrap 5)
 * version 1.4.2 (patched)
 * Supports Bootstrap 2.2.x, 2.3.x, 3.0, 5.x (patched)
 */
;(function($) {
var bootstrapWizardCreate = function(element, options) {
	var element = $(element);
	var obj = this;

	// selector skips any 'li' elements that do not contain a child with a tab data-bs-toggle
	var baseItemSelector = 'li:has([data-bs-toggle="tab"])'; // CHANGED
	var historyStack = [];

	var $settings = $.extend({}, $.fn.bootstrapWizard.defaults, options);
	var $activeTab = null;
	var $navigation = null;

	this.rebindClick = function(selector, fn) {
		selector.off('click').on('click', fn); // CHANGED
	}

	this.fixNavigationButtons = function() {
		if(!$activeTab.length) {
			var firstAnchor = $navigation.find('a:first').get(0);
			if (firstAnchor) {
				bootstrap.Tab.getOrCreateInstance(firstAnchor).show(); // CHANGED
			}
			$activeTab = $navigation.find(baseItemSelector + ':first');
		}

		// previous
		$($settings.previousSelector, element).toggleClass('disabled', (obj.firstIndex() >= obj.currentIndex()));

		// next
		var $next = $($settings.nextSelector, element);
		var nextDisabled = (obj.currentIndex() >= obj.navigationLength());
		$next.toggleClass('disabled', nextDisabled);
		var nextHidden = (obj.currentIndex() >= obj.navigationLength() && $($settings.finishSelector, element).length > 0);
		if (nextHidden) { $next.addClass("d-none"); } else { $next.removeClass("d-none"); } // CHANGED

		// last
		var $last = $($settings.lastSelector, element);
		if ($last.length) {
			if (nextHidden) { $last.addClass("d-none"); } else { $last.removeClass("d-none"); } // CHANGED
		}

		// finish/reset
		var $finish = $($settings.finishSelector, element);
		if ($finish.length) {
			var finishVisible = (obj.currentIndex() >= obj.navigationLength());
			if (finishVisible) { $finish.removeClass("d-none"); } else { $finish.addClass("d-none"); } // CHANGED
		}

		// back
		var $back = $($settings.backSelector, element);
		$back.toggleClass('disabled', (historyStack.length == 0));
		if (obj.currentIndex() >= obj.navigationLength() && $($settings.finishSelector, element).length > 0) {
			$back.addClass("d-none"); // CHANGED
		} else {
			$back.removeClass("d-none"); // CHANGED
		}

		// bind buttons
		obj.rebindClick($($settings.nextSelector, element), obj.next);
		obj.rebindClick($($settings.previousSelector, element), obj.previous);
		obj.rebindClick($($settings.lastSelector, element), obj.last);
		obj.rebindClick($($settings.firstSelector, element), obj.first);
		obj.rebindClick($($settings.finishSelector, element), obj.finish);
		obj.rebindClick($($settings.backSelector, element), obj.back);

		if($settings.onTabShow && typeof $settings.onTabShow === 'function' && $settings.onTabShow($activeTab, $navigation, obj.currentIndex())===false){
			return false;
		}
	};

	// === next, previous, first, last, finish, back ===
	this.next = function(e) {
		if(element.hasClass('last')) return false;
		if($settings.onNext && typeof $settings.onNext === 'function' && $settings.onNext($activeTab, $navigation, obj.nextIndex())===false) return false;

		var formerIndex = obj.currentIndex();
		var $index = obj.nextIndex();

		if($index <= obj.navigationLength()) {
			historyStack.push(formerIndex);
			var $anchor = $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ':eq(' + $index + ') a');
			var el = $anchor.get(0);
			if (el) { bootstrap.Tab.getOrCreateInstance(el).show(); } // CHANGED
		}
	};

	this.previous = function(e) {
		if(element.hasClass('first')) return false;
		if($settings.onPrevious && typeof $settings.onPrevious === 'function' && $settings.onPrevious($activeTab, $navigation, obj.previousIndex())===false) return false;

		var formerIndex = obj.currentIndex();
		var $index = obj.previousIndex();

		if($index >= 0) {
			historyStack.push(formerIndex);
			var $anchor = $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ':eq(' + $index + ') a');
			var el = $anchor.get(0);
			if (el) { bootstrap.Tab.getOrCreateInstance(el).show(); } // CHANGED
		}
	};

	this.first = function(e) {
		if($settings.onFirst && typeof $settings.onFirst === 'function' && $settings.onFirst($activeTab, $navigation, obj.firstIndex())===false) return false;
		if(element.hasClass('disabled')) return false;

		historyStack.push(obj.currentIndex());
		var el = $navigation.find(baseItemSelector + ':eq(0) a').get(0);
		if (el) { bootstrap.Tab.getOrCreateInstance(el).show(); } // CHANGED
	};

	this.last = function(e) {
		if($settings.onLast && typeof $settings.onLast === 'function' && $settings.onLast($activeTab, $navigation, obj.lastIndex())===false) return false;
		if(element.hasClass('disabled')) return false;

		historyStack.push(obj.currentIndex());
		var el = $navigation.find(baseItemSelector + ':eq(' + obj.navigationLength() + ') a').get(0);
		if (el) { bootstrap.Tab.getOrCreateInstance(el).show(); } // CHANGED
	};

	this.finish = function(e) {
		if ($settings.onFinish && typeof $settings.onFinish === 'function') {
			$settings.onFinish($activeTab, $navigation, obj.lastIndex());
		}
	};

	this.back = function() {
		if (historyStack.length == 0) return null;
		var formerIndex = historyStack.pop();
		if ($settings.onBack && typeof $settings.onBack === 'function' && $settings.onBack($activeTab, $navigation, formerIndex) === false) {
			historyStack.push(formerIndex);
			return false;
		}
		var el = element.find(baseItemSelector + ':eq(' + formerIndex + ') a').get(0);
		if (el) { bootstrap.Tab.getOrCreateInstance(el).show(); } // CHANGED
	};

	// === indexing and helpers ===
	this.currentIndex = function() {
		return $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '')).index($activeTab);
	};
	this.firstIndex = function() { return 0; };
	this.lastIndex = function() { return obj.navigationLength(); };
	this.getIndex = function(e) {
		return $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '')).index(e);
	};
	this.nextIndex = function() {
		var i = this.currentIndex(); var t=null;
		do { i++; t=$navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ":eq(" + i + ")"); }
		while (t && t.hasClass("disabled"));
		return i;
	};
	this.previousIndex = function() {
		var i = this.currentIndex(); var t=null;
		do { i--; t=$navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '') + ":eq(" + i + ")"); }
		while (t && t.hasClass("disabled"));
		return i;
	};
	this.navigationLength = function() {
		return $navigation.find(baseItemSelector + ($settings.withVisible ? ':visible' : '')).length - 1;
	};

	// === events ===
	var innerTabClick = function (e) {
		var $ul = $navigation.find(baseItemSelector);
		var clickedIndex = $ul.index($(e.currentTarget).parent(baseItemSelector));
		var $clickedTab = $( $ul[clickedIndex] );
		if($settings.onTabClick && typeof $settings.onTabClick === 'function' && $settings.onTabClick($activeTab, $navigation, obj.currentIndex(), clickedIndex, $clickedTab)===false){
		    return false;
		}
	};

	var innerTabShown = function (e) {
		var $element = $(e.target).parent();
		var nextTab = $navigation.find(baseItemSelector).index($element);
		if($element.hasClass('disabled')) return false;
		if($settings.onTabChange && typeof $settings.onTabChange === 'function' && $settings.onTabChange($activeTab, $navigation, obj.currentIndex(), nextTab)===false) return false;
		$activeTab = $element;
		obj.fixNavigationButtons();
	};

	this.resetWizard = function() {
		$('a[data-bs-toggle="tab"]', $navigation).off('click', innerTabClick);
		$('a[data-bs-toggle="tab"]', $navigation).off('show.bs.tab', innerTabShown);

		$navigation = element.find('ul:first', element);
		$activeTab = $navigation.find(baseItemSelector + '.active', element);

		$('a[data-bs-toggle="tab"]', $navigation).on('click', innerTabClick);
		$('a[data-bs-toggle="tab"]', $navigation).on('show.bs.tab', innerTabShown);

		obj.fixNavigationButtons();
	};

	$navigation = element.find('ul:first', element);
	$activeTab = $navigation.find(baseItemSelector + '.active', element);

	if(!$navigation.hasClass($settings.tabClass)) { $navigation.addClass($settings.tabClass); }
	if($settings.onInit && typeof $settings.onInit === 'function'){ $settings.onInit($activeTab, $navigation, 0); }
	if($settings.onShow && typeof $settings.onShow === 'function'){ $settings.onShow($activeTab, $navigation, obj.nextIndex()); }

	$('a[data-bs-toggle="tab"]', $navigation).on('click', innerTabClick);
	$('a[data-bs-toggle="tab"]', $navigation).on('show.bs.tab', innerTabShown);
};

$.fn.bootstrapWizard = function(options) {
	if (typeof options == 'string') {
		var args = Array.prototype.slice.call(arguments, 1)
		if(args.length === 1) { args.toString(); }
		return this.data('bootstrapWizard')[options](args);
	}
	return this.each(function(index){
		var element = $(this);
		if (element.data('bootstrapWizard')) return;
		var wizard = new bootstrapWizardCreate(element, options);
		element.data('bootstrapWizard', wizard);
		wizard.fixNavigationButtons();
	});
};

$.fn.bootstrapWizard.defaults = {
	withVisible:      true,
	tabClass:         'nav nav-pills',
	nextSelector:     '.wizard li.next',
	previousSelector: '.wizard li.previous',
	firstSelector:    '.wizard li.first',
	lastSelector:     '.wizard li.last',
	finishSelector:   '.wizard li.finish',
	backSelector:     '.wizard li.back',
	onShow:           null,
	onInit:           null,
	onNext:           null,
	onPrevious:       null,
	onLast:           null,
	onFirst:          null,
	onFinish:         null,
	onBack:           null,
	onTabChange:      null,
	onTabClick:       null,
	onTabShow:        null
};
})(jQuery);
