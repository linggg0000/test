// ok 

/*!
 * jQuery twitter bootstrap wizard plugin - Bootstrap 5 Compatible Version
 * Based on working version 1.0 - Simplified Bootstrap 5 Patch
 * version 1.0 - Bootstrap 5 Patch
 * Requires jQuery v1.3.2 or later
 * Supports Bootstrap 5.x
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 * Authors: Vadim Vincent Gabriel (http://vadimg.com), Jason Gill (www.gilluminate.com)
 * Bootstrap 5 Patch: Simplified patch based on working minified version
 */
;(function($) {
    var bootstrapWizardCreate = function(element, options) {
        element = $(element);
        var obj = this,
            settings = $.extend({}, $.fn.bootstrapWizard.defaults, options),
            $activeTab = null,
            $navigation = null;

        // PATCH: Updated to use off/on instead of unbind/bind for jQuery 3+ compatibility
        this.rebindClick = function(selector, fn) {
            selector.off("click", fn).on("click", fn);
        };

        this.fixNavigationButtons = function() {
            if (!$activeTab.length) {
                // PATCH: Use Bootstrap 5 tab activation method
                var firstTab = $navigation.find("a:first");
                obj.showTab(firstTab);
                $activeTab = $navigation.find('li:has([data-bs-toggle="tab"]):first');
            }

            $(settings.previousSelector, element).toggleClass("disabled", obj.firstIndex() >= obj.currentIndex());
            $(settings.nextSelector, element).toggleClass("disabled", obj.currentIndex() >= obj.navigationLength());
            
            obj.rebindClick($(settings.nextSelector, element), obj.next);
            obj.rebindClick($(settings.previousSelector, element), obj.previous);
            obj.rebindClick($(settings.lastSelector, element), obj.last);
            obj.rebindClick($(settings.firstSelector, element), obj.first);
            
            if (settings.onTabShow && "function" === typeof settings.onTabShow && 
                false === settings.onTabShow($activeTab, $navigation, obj.currentIndex())) {
                return false;
            }
        };

        // PATCH: New method to handle both Bootstrap 4 and 5 tab activation
        this.showTab = function(tabLink) {
            if (tabLink.length) {
                // Check if Bootstrap 5 is available
                if (typeof bootstrap !== 'undefined' && bootstrap.Tab) {
                    // Use Bootstrap 5 Tab constructor
                    var tab = new bootstrap.Tab(tabLink[0]);
                    tab.show();
                } else {
                    // Fallback to jQuery method
                    tabLink.tab('show');
                }
            }
        };

        this.next = function(e) {
            // PATCH: Prevent default link behavior
            if (e) e.preventDefault();
            
            if (element.hasClass("last") || 
                (settings.onNext && "function" === typeof settings.onNext && 
                 false === settings.onNext($activeTab, $navigation, obj.nextIndex()))) {
                return false;
            }
            
            var $index = obj.nextIndex();
            if ($index <= obj.navigationLength()) {
                var nextTab = $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + $index + ') a');
                obj.showTab(nextTab);
            }
        };

        this.previous = function(e) {
            // PATCH: Prevent default link behavior  
            if (e) e.preventDefault();
            
            if (element.hasClass("first") || 
                (settings.onPrevious && "function" === typeof settings.onPrevious && 
                 false === settings.onPrevious($activeTab, $navigation, obj.previousIndex()))) {
                return false;
            }
            
            var $index = obj.previousIndex();
            if ($index >= 0) {
                var prevTab = $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + $index + ') a');
                obj.showTab(prevTab);
            }
        };

        this.first = function(e) {
            // PATCH: Prevent default link behavior
            if (e) e.preventDefault();
            
            if ((settings.onFirst && "function" === typeof settings.onFirst && 
                 false === settings.onFirst($activeTab, $navigation, obj.firstIndex())) || 
                element.hasClass("disabled")) {
                return false;
            }
            
            var firstTab = $navigation.find('li:has([data-bs-toggle="tab"]):eq(0) a');
            obj.showTab(firstTab);
        };

        this.last = function(e) {
            // PATCH: Prevent default link behavior
            if (e) e.preventDefault();
            
            if ((settings.onLast && "function" === typeof settings.onLast && 
                 false === settings.onLast($activeTab, $navigation, obj.lastIndex())) || 
                element.hasClass("disabled")) {
                return false;
            }
            
            var lastTab = $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + obj.navigationLength() + ') a');
            obj.showTab(lastTab);
        };

        this.currentIndex = function() {
            return $navigation.find('li:has([data-bs-toggle="tab"])').index($activeTab);
        };

        this.firstIndex = function() {
            return 0;
        };

        this.lastIndex = function() {
            return obj.navigationLength();
        };

        this.getIndex = function(element) {
            return $navigation.find('li:has([data-bs-toggle="tab"])').index(element);
        };

        this.nextIndex = function() {
            return $navigation.find('li:has([data-bs-toggle="tab"])').index($activeTab) + 1;
        };

        this.previousIndex = function() {
            return $navigation.find('li:has([data-bs-toggle="tab"])').index($activeTab) - 1;
        };

        this.navigationLength = function() {
            return $navigation.find('li:has([data-bs-toggle="tab"])').length - 1;
        };

        this.activeTab = function() {
            return $activeTab;
        };

        this.nextTab = function() {
            var nextIndex = obj.currentIndex() + 1;
            return $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + nextIndex + ')').length ? 
                   $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + nextIndex + ')') : null;
        };

        this.previousTab = function() {
            if (obj.currentIndex() <= 0) return null;
            var prevIndex = parseInt(obj.currentIndex() - 1);
            return $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + prevIndex + ')');
        };

        this.show = function(index) {
            var tabToShow = element.find('li:has([data-bs-toggle="tab"]):eq(' + index + ') a');
            obj.showTab(tabToShow);
        };

        this.disable = function(index) {
            $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + index + ')').addClass("disabled");
        };

        this.enable = function(index) {
            $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + index + ')').removeClass("disabled");
        };

        this.hide = function(index) {
            $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + index + ')').hide();
        };

        this.display = function(index) {
            $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + index + ')').show();
        };

        this.remove = function(args) {
            var removeTabPane = typeof args[1] !== 'undefined' ? args[1] : false;
            var $item = $navigation.find('li:has([data-bs-toggle="tab"]):eq(' + args[0] + ')');
            
            if (removeTabPane) {
                var href = $item.find("a").attr("href");
                $(href).remove();
            }
            $item.remove();
        };

        // Initialize navigation and active tab
        $navigation = element.find("ul:first", element);
        $activeTab = $navigation.find('li:has([data-bs-toggle="tab"]).active', element);
        
        if (!$navigation.hasClass(settings.tabClass)) {
            $navigation.addClass(settings.tabClass);
        }

        // Call initialization callbacks
        if (settings.onInit && "function" === typeof settings.onInit) {
            settings.onInit($activeTab, $navigation, 0);
        }
        if (settings.onShow && "function" === typeof settings.onShow) {
            settings.onShow($activeTab, $navigation, obj.nextIndex());
        }

        // Set up initial button states
        obj.fixNavigationButtons();

        // PATCH: Updated event binding for Bootstrap 5 compatibility
        $('a[data-bs-toggle="tab"]', $navigation).on("click", function(event) {
            var clickedIndex = $navigation.find('li:has([data-bs-toggle="tab"])').index(
                $(event.currentTarget).parent('li:has([data-bs-toggle="tab"])')
            );
            
            if (settings.onTabClick && "function" === typeof settings.onTabClick && 
                false === settings.onTabClick($activeTab, $navigation, obj.currentIndex(), clickedIndex)) {
                return false;
            }
        });

        // PATCH: Updated to handle both Bootstrap 4 and 5 events
        $('a[data-bs-toggle="tab"]', $navigation).on("shown.bs.tab", function(event) {
            var $element = $(event.target).parent();
            var nextTabIndex = $navigation.find('li:has([data-bs-toggle="tab"])').index($element);
            
            if ($element.hasClass("disabled") || 
                (settings.onTabChange && "function" === typeof settings.onTabChange && 
                 false === settings.onTabChange($activeTab, $navigation, obj.currentIndex(), nextTabIndex))) {
                return false;
            }
            
            $activeTab = $element;
            obj.fixNavigationButtons();
        });
    };

    $.fn.bootstrapWizard = function(options) {
        if ("string" === typeof options) {
            var args = Array.prototype.slice.call(arguments, 1);
            if (args.length === 1) {
                args.toString();
            }
            return this.data("bootstrapWizard")[options](args);
        }
        
        return this.each(function(index) {
            var $element = $(this);
            if (!$element.data("bootstrapWizard")) {
                var wizard = new bootstrapWizardCreate($element, options);
                $element.data("bootstrapWizard", wizard);
            }
        });
    };

    $.fn.bootstrapWizard.defaults = {
        tabClass: "nav nav-pills",
        nextSelector: ".wizard li.next", 
        previousSelector: ".wizard li.previous",
        firstSelector: ".wizard li.first",
        lastSelector: ".wizard li.last",
        onShow: null,
        onInit: null,
        onNext: null,
        onPrevious: null,
        onLast: null,
        onFirst: null,
        onTabChange: null,
        onTabClick: null,
        onTabShow: null
    };

})(jQuery);
